@page "/products"
@inject ProductsViewModel productsTableViewModel
@inject IJSRuntime JSRuntime

<PageTitle>Produits</PageTitle>

<Modal @ref="modal" Title=" Edit Product">
    <BodyTemplate>


        <EditForm Model="produitToEdit" OnValidSubmit="SaveEdit">
            <div class="mb-2">
                <label>Nom Produit</label>
                <InputText class="form-control" @bind-Value="produitToEdit.NameProduct" />
            </div>
            <div class="mb-2">
                <label>Description</label>
                <InputText class="form-control" @bind-Value="produitToEdit.Description" />
            </div>
            <div class="mb-2">
                <label>Nom Photo</label>
                <InputText class="form-control" @bind-Value="produitToEdit.NamePhoto" />
            </div>
            <div class="mb-2">
                <label>Uri Photo</label>
                <InputText class="form-control" @bind-Value="produitToEdit.UriPhoto" />
            </div>

            <div class="d-flex justify-content-end mt-3">
                <button type="button" class="btn btn-secondary me-2" @onclick="() => CancelEdit()">Cancel</button>
                <button type="submit" class="btn btn-primary" @onclick="() => SaveEdit()">Save</button>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>


<section class="container py-5">
    <div class="text-center mb-5">
        <h1 class="display-5 fw-bold text-primary">Nos Produits</h1>
        <p class="lead text-muted">
            Découvrez la liste des produits disponibles. Vous pouvez aussi les supprimer si nécessaire.
        </p>
    </div>

    @if (productsTableViewModel.Products == null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!productsTableViewModel.Products.Any())
    {
        <div class="alert alert-warning text-center" role="alert">
            Aucun produit trouvé.
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var produit in productsTableViewModel.Products)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm border-0">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title text-dark">
                                <i class="bi bi-box-seam me-2 text-primary"></i>
                                @produit.NameProduct
                            </h5>
                            <p class="card-text text-muted">ID: @produit.IdProduct</p>
                            <p class="card-text text-muted flex-grow-1">@produit.Description</p>
                            <div class="mt-auto">
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(produit)">
                                    <i class="bi bi-trash"></i> Supprimer
                                </button>

                                <button class="btn btn-sm btn-outline-warning ms-2" @onclick="() => OpenEditModal(produit)">
                                    <i class="bi bi-pencil"></i> Modifier
                                </button>

                            </div>
                        </div>
                    </div>
                </div>

            }
        </div>
    }
</section>


<Toasts Messages="messages" Placement="ToastsPlacement.TopRight" AutoHide="true" Delay="5000" ShowCloseButton="true" />

@code {
    List<ToastMessage> messages = new();
    private Modal modal = default!;
    private bool showEditModal = true;
    private Product produitToEdit;

    private void ShowMessage(ToastMessage toastMessage) => messages.Add(toastMessage);

    protected override async Task OnInitializedAsync()
    {
        var toastMessage = await productsTableViewModel.LoadData();
        ShowMessage(toastMessage);
    }

    // --- DELETE ---
    private async Task ConfirmDelete(Product produit)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{produit.NameProduct}'?");
        if (confirmed)
        {
            var toast = await productsTableViewModel.DeleteProduct(produit);
            ShowMessage(toast);
        }
    }

    private void OpenEditModal(Product produit)
    {
        produitToEdit = new Product
        {
            IdProduct = produit.IdProduct,
            NameProduct = produit.NameProduct,
            Description = produit.Description,
            NamePhoto = produit.NamePhoto,
            UriPhoto = produit.UriPhoto
        };
        modal.ShowAsync();
    }

    private async void SaveEdit()
    {
        if (produitToEdit == null)
        {
            modal.HideAsync();
            return;
        }
        var toast = await productsTableViewModel.UpdateProduct(produitToEdit);
        ShowMessage(toast);
        modal.HideAsync();
    }

    private void CancelEdit()
    {
        modal.HideAsync();
        produitToEdit = null;
    }
}