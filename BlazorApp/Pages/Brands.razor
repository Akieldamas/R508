@page "/brands"
@inject BrandViewModel brandViewModel
@inject IJSRuntime JSRuntime

<PageTitle>Marques</PageTitle>

<h1>Marques</h1>

<p>Voir les marques, supprimer aussi!</p>

@if (brandViewModel.Brands == null)
{
    <p><em>Loading...</em></p>
}
else if (!brandViewModel.Brands.Any())
{
    <p><em>No products found.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nom Marques</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var marque in brandViewModel.Brands)
            {
                <tr>
                    <td>@marque.IdBrand</td>
                    <td>@marque.NameBrand</td>
                    <td>
                        <button class="btn btn-sm btn-danger me-2" @onclick="() => ConfirmDelete(marque)">X</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<Toasts Messages="messages" Placement="ToastsPlacement.TopRight" AutoHide="true" Delay="5000" ShowCloseButton="true"/>

@code {
    List<ToastMessage> messages = new();

    private void ShowMessage(ToastMessage toastMessage) => messages.Add(toastMessage);

    protected override async Task OnInitializedAsync()
    {
        var toastMessage = await brandViewModel.LoadData();
        ShowMessage(toastMessage);
    }

    private async Task ConfirmDelete(Brand marque)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{marque.NameBrand}'?");
        if (confirmed)
        {
            var toast = await brandViewModel.DeleteBrand(marque);
            ShowMessage(toast);
        }
    }
}
